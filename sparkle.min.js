(function (global) {
    function require(file, parentModule) {
        if ({}.hasOwnProperty.call(require.cache, file))
            return require.cache[file];
        var resolved = require.resolve(file);
        if (!resolved)
            throw new Error('Failed to resolve module ' + file);
        var module$ = {
                id: file,
                require: require,
                filename: file,
                exports: {},
                loaded: false,
                parent: parentModule,
                children: []
            };
        if (parentModule)
            parentModule.children.push(module$);
        var dirname = file.slice(0, file.lastIndexOf('/') + 1);
        require.cache[file] = module$.exports;
        resolved.call(module$.exports, module$, module$.exports, dirname, file);
        module$.loaded = true;
        return require.cache[file] = module$.exports;
    }
    require.modules = {};
    require.cache = {};
    require.resolve = function (file) {
        return {}.hasOwnProperty.call(require.modules, file) ? require.modules[file] : void 0;
    };
    require.define = function (file, fn) {
        require.modules[file] = fn;
    };
    var process = function () {
            var cwd = '/';
            return {
                title: 'browser',
                version: 'v0.10.5',
                browser: true,
                env: {},
                argv: [],
                nextTick: global.setImmediate || function (fn) {
                    setTimeout(fn, 0);
                },
                cwd: function () {
                    return cwd;
                },
                chdir: function (dir) {
                    cwd = dir;
                }
            };
        }();
    require.define('/index.js', function (module, exports, __dirname, __filename) {
        exports.utils = require('/utils.js', module);
        exports.Emitter = require('/emitter.js', module).Emitter;
        exports.Factory = require('/factory.js', module).Factory;
        exports.positionInitializer = require('/initializers/position.js', module).position;
        exports.velocityInitializer = require('/initializers/velocity.js', module).velocity;
        exports.lifeTimeInitializer = require('/initializers/lifetime.js', module).lifeTime;
        exports.accelerateAction = require('/actions/accelerate.js', module).accelerate;
        exports.ageAction = require('/actions/age.js', module).age;
        exports.moveAction = require('/actions/move.js', module).move;
        exports.fadeAction = require('/actions/fade.js', module).fade;
        exports.pulseAction = require('/actions/pulse.js', module).pulse;
        exports.lineZone = require('/zones/line.js', module).line;
        exports.cuboidZone = require('/zones/cuboid.js', module).cuboid;
        exports.sphereZone = require('/zones/sphere.js', module).sphere;
        exports.asyncZone = require('/zones/async.js', module).async;
        exports.arrayZone = require('/zones/array.js', module).array;
        exports.translateZone = require('/zones/translate.js', module).translate;
    });
    require.define('/zones/translate.js', function (module, exports, __dirname, __filename) {
        exports.translate = function (zone, tx, ty, tz) {
            if (arguments.length === 2) {
                var vector = arguments[1];
                tx = vector[0];
                ty = vector[1];
                tz = vector[2];
            }
            return function (vector) {
                zone(vector);
                vector[0] += tx;
                vector[1] += ty;
                vector[2] += tz;
            };
        };
    });
    require.define('/zones/array.js', function (module, exports, __dirname, __filename) {
        var utils = require('/utils.js', module);
        exports.array = function (source) {
            return function (vector) {
                if (!source.length) {
                    vector[0] = vector[1] = vector[2] = NaN;
                } else {
                    utils.asVector(source[Math.floor(Math.random() * source.length)], vector);
                }
            };
        };
    });
    require.define('/utils.js', function (module, exports, __dirname, __filename) {
        var vectors = require('/factories/vectors.js', module).factory;
        exports.discardVector = function (vector) {
            vectors.free(vector);
        };
        exports.asVector = function (what, destination) {
            if (typeof destination === 'undefined')
                destination = vectors.allocate();
            if (typeof what === 'function') {
                what(destination);
            } else {
                destination[0] = what[0];
                destination[1] = what[1];
                destination[2] = what[2];
            }
            return destination;
        };
        exports.vectorLength = function (vector) {
            return Math.sqrt(Math.pow(vector[0], 2) + Math.pow(vector[1], 2) + Math.pow(vector[2], 2));
        };
    });
    require.define('/factories/vectors.js', function (module, exports, __dirname, __filename) {
        var Factory = require('/factory.js', module).Factory;
        exports.factory = new Factory(require('/types.js', module).Vector);
    });
    require.define('/types.js', function (module, exports, __dirname, __filename) {
        var Particle = exports.Particle = function () {
                this.status = this.ALIVE;
                if (!this.vectors) {
                    this.vectors = [];
                } else {
                    this.vectors.splice(0, this.vectors.length);
                }
            };
        Particle.prototype.ALIVE = 0;
        Particle.prototype.DEAD = 1;
        Particle.prototype.USER = 2;
        var Vector = exports.Vector = function () {
                this[0] = this[1] = this[2] = NaN;
            };
    });
    require.define('/factory.js', function (module, exports, __dirname, __filename) {
        var Factory = exports.Factory = function (constructor) {
                this._constructor = constructor;
                this._proxy = function () {
                };
                this._proxy.prototype = this._constructor.prototype;
                this._pool = [];
                this._tag = {};
            };
        Factory.prototype.allocate = function () {
            if (!this._pool.length) {
                var newInstance = new this._proxy();
                newInstance._tag = this._tag;
                this._pool.push(newInstance);
            }
            var instance = this._pool.pop();
            this._constructor.call(instance);
            return instance;
        };
        Factory.prototype.free = function (instance) {
            if (instance._tag !== this._tag)
                return;
            this._pool.push(instance);
        };
    });
    require.define('/zones/async.js', function (module, exports, __dirname, __filename) {
        var utils = require('/utils.js', module);
        exports.async = function (fn, context) {
            var current = null;
            fn.call(context, function (zone) {
                current = zone;
            });
            return function (vector) {
                if (current) {
                    utils.asVector(current, vector);
                } else {
                    vector.x = vector.y = vector.z = NaN;
                }
            };
        };
    });
    require.define('/zones/sphere.js', function (module, exports, __dirname, __filename) {
        exports.sphere = function (radius, inner, uniform) {
            if (typeof inner === 'undefined')
                inner = false;
            if (typeof uniform === 'undefined')
                uniform = true;
            return function (vector) {
                if (uniform) {
                    var z = Math.random() * 2 - 1;
                    var t = Math.random() * Math.PI * 2;
                    var r = Math.sqrt(1 - Math.pow(z, 2));
                    var v = inner ? Math.pow(Math.random(), 1 / 3) : 1;
                    vector[0] = radius * v * r * Math.cos(t);
                    vector[1] = radius * v * r * Math.sin(t);
                    vector[2] = radius * v * z;
                } else {
                    var r = this._inner ? Math.floor(Math.random() * (this._radius + 1)) : this._radius;
                    var p = Math.random() * Math.PI * 2;
                    var t = Math.random() * Math.PI;
                    vector[0] = r * Math.cos(p) * Math.sin(t);
                    vector[1] = r * Math.sin(p) * Math.sin(t);
                    vector[2] = r * Math.cos(t);
                }
            };
        };
    });
    require.define('/zones/cuboid.js', function (module, exports, __dirname, __filename) {
        var FACES = [
                [
                    +1,
                    0,
                    1,
                    2
                ],
                [
                    -1,
                    0,
                    1,
                    2
                ],
                [
                    +1,
                    1,
                    2,
                    0
                ],
                [
                    -1,
                    1,
                    2,
                    0
                ],
                [
                    +1,
                    2,
                    0,
                    1
                ],
                [
                    -1,
                    2,
                    0,
                    1
                ]
            ];
        exports.cuboid = function (sx, sy, sz, inner) {
            if (typeof inner === 'undefined')
                inner = false;
            var s = [
                    sx,
                    sy,
                    sz
                ];
            return function (vector) {
                if (inner) {
                    vector[0] = (Math.random() - 0.5) * s[0];
                    vector[1] = (Math.random() - 0.5) * s[1];
                    vector[2] = (Math.random() - 0.5) * s[2];
                } else {
                    var face = FACES[Math.floor(Math.random() * 6)];
                    vector[face[1]] = face[0] * s[face[1]] / 2;
                    vector[face[2]] = (Math.random() - 0.5) * s[face[2]];
                    vector[face[3]] = (Math.random() - 0.5) * s[face[3]];
                }
            };
        };
    });
    require.define('/zones/line.js', function (module, exports, __dirname, __filename) {
        exports.line = function (bx, by, bz, ex, ey, ez) {
            if (arguments[0] instanceof Array && arguments.length === 1) {
                arguments[1] = arguments[0];
                arguments.length += 1;
            }
            if (arguments[0] instanceof Array) {
                var vector = arguments[0];
                arguments[5] = arguments[3];
                arguments[4] = arguments[2];
                arguments[3] = arguments[1];
                arguments[2] = vector[2];
                arguments[1] = vector[1];
                arguments[0] = vector[0];
                arguments.length += 2;
            }
            if (arguments[3] instanceof Array) {
                var vector = arguments[3];
                arguments[5] = vector[2];
                arguments[4] = vector[1];
                arguments[3] = vector[0];
                arguments.length += 2;
            }
            if (arguments.length === 1) {
                ex = arguments[0];
                bx = by = bz = 0;
                ey = ez = 0;
            }
            if (arguments.length === 2) {
                bx = arguments[0];
                ex = arguments[1];
                by = bz = 0;
                ey = ez = 0;
            }
            if (arguments.length === 3) {
                ex = arguments[0];
                ey = arguments[1];
                ez = arguments[2];
                bx = by = bz = 0;
            }
            var dx = ex - bx;
            var dy = ey - by;
            var dz = ez - bz;
            return function (vector) {
                var r = Math.random();
                vector[0] = bx + r * dx;
                vector[1] = by + r * dy;
                vector[2] = bz + r * dz;
            };
        };
    });
    require.define('/actions/pulse.js', function (module, exports, __dirname, __filename) {
        exports.pulse = function (fn) {
            if (typeof fn === 'undefined')
                fn = function (n) {
                    return Math.sqrt(n - Math.pow(n, 2));
                };
            return function (particle, delta) {
                var age = particle.age % particle.lifeTime;
                particle.size = fn(age / particle.lifeTime);
            };
        };
    });
    require.define('/actions/fade.js', function (module, exports, __dirname, __filename) {
        exports.fade = function (fn) {
            if (typeof fn === 'undefined')
                fn = function (n) {
                    return Math.sqrt(n - Math.pow(n, 2));
                };
            return function (particle, delta) {
                var age = particle.age % particle.lifeTime;
                particle.opacity = fn(age / particle.lifeTime);
            };
        };
    });
    require.define('/actions/move.js', function (module, exports, __dirname, __filename) {
        exports.move = function () {
            return function (particle, delta) {
                var position = particle.position;
                var velocity = particle.velocity;
                position[0] += velocity[0] * delta;
                position[1] += velocity[1] * delta;
                position[2] += velocity[2] * delta;
            };
        };
    });
    require.define('/actions/age.js', function (module, exports, __dirname, __filename) {
        exports.age = function (eternal) {
            if (typeof eternal === 'undefined')
                eternal = false;
            return function (particle, delta) {
                particle.age += delta;
                if (!eternal && particle.age > particle.lifeTime) {
                    particle.status = particle.DEAD;
                }
            };
        };
    });
    require.define('/actions/accelerate.js', function (module, exports, __dirname, __filename) {
        exports.accelerate = function (x, y, z) {
            return function (particle, delta) {
                var velocity = particle.velocity;
                velocity[0] += delta * x;
                velocity[1] += delta * y;
                velocity[2] += delta * z;
            };
        };
    });
    require.define('/initializers/lifetime.js', function (module, exports, __dirname, __filename) {
        var utils = require('/utils.js', module);
        exports.lifeTime = function (zone) {
            var vector = [
                    NaN,
                    NaN,
                    NaN
                ];
            return function (particle) {
                particle.age = 0;
                utils.asVector(zone, vector);
                particle.lifeTime = utils.vectorLength(vector);
            };
        };
    });
    require.define('/initializers/velocity.js', function (module, exports, __dirname, __filename) {
        var utils = require('/utils.js', module);
        exports.velocity = function (zone) {
            return function (particle) {
                particle.velocity = utils.asVector(zone);
                particle.vectors.push(particle.velocity);
            };
        };
    });
    require.define('/initializers/position.js', function (module, exports, __dirname, __filename) {
        var utils = require('/utils.js', module);
        exports.position = function (zone) {
            return function (particle) {
                particle.position = utils.asVector(zone);
                particle.vectors.push(particle.position);
            };
        };
    });
    require.define('/emitter.js', function (module, exports, __dirname, __filename) {
        var particles = require('/factories/particles.js', module).factory;
        var utils = require('/utils.js', module);
        var Emitter = exports.Emitter = function (frequency) {
                this._frequency = frequency;
                this._timer = 0;
                this._delta = 0;
                this._initializers = [];
                this._actions = [];
                this._particles = [];
            };
        Emitter.prototype.initializer = function (initializer) {
            this._initializers.push(initializer);
            return this;
        };
        Emitter.prototype.action = function (action) {
            this._actions.push(action);
            return this;
        };
        Emitter.prototype.spawn = function (count, randomly) {
            for (var t = 0, T = count; t < T; ++t) {
                this.createParticle(randomly != null ? Math.random() * randomly : 0);
            }
        };
        Emitter.prototype.delta = function () {
            return this._delta;
        };
        Emitter.prototype.update = function (delta) {
            this._delta += delta;
            for (var t = this._particles.length - 1; t >= 0; --t)
                this.updateParticle(delta, t);
            if (this._frequency) {
                this._delta -= delta;
                this._timer += delta;
                while (this._timer >= this._frequency) {
                    this._delta += this._frequency;
                    this._timer -= this._frequency;
                    this.createParticle(this._timer);
                }
            }
        };
        Emitter.prototype.createParticle = function (delta) {
            var particle = particles.allocate();
            for (var t = 0, T = this._initializers.length; t < T; ++t)
                this._initializers[t](particle);
            this._particles.unshift(particle);
            if (!this.deathToll(particle, 0)) {
                this.onWakeUp(particle);
                this.updateParticle(delta, 0);
            }
        };
        Emitter.prototype.updateParticle = function (delta, n) {
            var particle = this._particles[n];
            for (var t = 0, T = this._actions.length; t < T; ++t)
                this._actions[t](particle, delta);
            if (!this.deathToll(particle, n)) {
                this.onUpdate(particle);
            }
        };
        Emitter.prototype.deathToll = function (particle, n) {
            if (particle.status !== particle.DEAD)
                return false;
            this._particles.splice(n, 1);
            this.onSleep(particle);
            for (var t = 0, T = particle.vectors.length; t < T; ++t)
                utils.discardVector(particle.vectors[t]);
            particle.vectors.splice(0, particle.vectors.length);
            particles.free(particle);
            return true;
        };
        Emitter.prototype.onWakeUp = function (particle) {
        };
        Emitter.prototype.onUpdate = function (particle) {
        };
        Emitter.prototype.onSleep = function (particle) {
        };
    });
    require.define('/factories/particles.js', function (module, exports, __dirname, __filename) {
        var Factory = require('/factory.js', module).Factory;
        exports.factory = new Factory(require('/types.js', module).Particle);
    });
    global.SPARKLE = require('/index.js');
}.call(this, this));